---
- name: Get token of REST API.
  uri:
    url: "http://guacamole:8080/guacamole/api/tokens"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    method: POST
    body: 'username={{ username }}&password={{ password }}'
    validate_certs: false
    return_content: yes
    status_code: 200
  register: token

- name: Get Users.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/users"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
    method: GET
    validate_certs: false
    return_content: yes
    status_code: 200
  register: guacamole_users

- name: Get Connections.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/connections"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
    method: GET
    validate_certs: false
    return_content: yes
    status_code: 200
  register: guacamole_connections
- name: Set fact to target connection id.
  set_fact:
    connectionid: "{{ item.key }}"
  when: item.value.idmIdentifier == idm_connection.id
  loop: "{{ guacamole_connections.json | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Put connection.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/connections/{{ connectionid }}"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
      Content-Type: "application/json"
    method: PUT
    body_format: json
    body:
      name: "{{ hostname }}:{{ idm_connection.id }}"
      parentIdentifier: ROOT
      protocol: "{{ idm_connection.protocol }}"
      idmIdentifier: "{{ idm_connection.id }}"
      parameters:
        port: "{{ idm_connection.port | default('') }}"
        create-recording-path: "true"
        recording-path: "${HISTORY_PATH}/${HISTORY_UUID}"
        username: >-
          {%- if idm_connection.loginAccount == 'ROOT' -%} {{ insideRootUsername }}
          {%- else -%} {{ insideAdminUsername }}
          {%- endif -%}
        password: >-
          {%- if idm_connection.loginAccount == 'ROOT' -%} {{ insideRootPassword }}
          {%- else -%} {{ insideAdminPassword }}
          {%- endif -%}
        create-typescript-path: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} true
          {%- else -%} 
          {%- endif -%}
        typescript-path: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} ${HISTORY_PATH}/${HISTORY_UUID}
          {%- else -%} 
          {%- endif -%}
        typescript-name: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} typescript
          {%- else -%} 
          {%- endif -%}
        hostname: "{{ hostname }}"
        ignore-cert: >-
          {%- if idm_connection.protocol == 'rdp' -%} true
          {%- else -%} 
          {%- endif -%}
      attributes:
        remark: "{{ idm_connection.remark | default('') }}"
        max-connections: "0"
        max-connections-per-user: "0"
        weight: ""
        failover-only: ""
        guacd-port: ""
        guacd-encryption: ""
    validate_certs: false
    status_code: 204
  when: prov_operation != 'delete' and connectionid is defined

- name: Post connection.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/connections"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
      Content-Type: "application/json"
    method: POST
    body_format: json
    body:
      name: "{{ hostname }}:{{ idm_connection.id }}"
      parentIdentifier: ROOT
      protocol: "{{ idm_connection.protocol }}"
      idmIdentifier: "{{ idm_connection.id }}"
      parameters:
        port: "{{ idm_connection.port | default('') }}"
        create-recording-path: "true"
        recording-path: "${HISTORY_PATH}/${HISTORY_UUID}"
        username: >-
          {%- if idm_connection.loginAccount == 'ROOT' -%} {{ insideRootUsername }}
          {%- else -%} {{ insideAdminUsername }}
          {%- endif -%}
        password: >-
          {%- if idm_connection.loginAccount == 'ROOT' -%} {{ insideRootPassword }}
          {%- else -%} {{ insideAdminPassword }}
          {%- endif -%}
        create-typescript-path: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} true
          {%- else -%}
          {%- endif -%}
        typescript-path: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} ${HISTORY_PATH}/${HISTORY_UUID}
          {%- else -%}
          {%- endif -%}
        typescript-name: >-
          {%- if idm_connection.protocol == 'ssh' or idm_connection.protocol == 'telnet' -%} typescript
          {%- else -%}
          {%- endif -%}
        hostname: "{{ hostname }}"
        ignore-cert: >-
          {%- if idm_connection.protocol == 'rdp' -%} true
          {%- else -%}
          {%- endif -%}
      attributes:
        remark: "{{ idm_connection.remark | default('') }}"
        max-connections: "0"
        max-connections-per-user: "0"
        weight: ""
        failover-only: ""
        guacd-port: ""
        guacd-encryption: ""
    validate_certs: false
    return_content: yes
    status_code: 200
  when: connectionid is not defined
  register: new_connection

- name: Delete connection.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/connections/{{ connectionid }}"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
    method: DELETE
    validate_certs: false
    status_code: 204
  when: prov_operation == 'delete' and connectionid is defined

- name: Register connection permission.
  uri:
    url: "http://guacamole:8080/guacamole/api/session/data/postgresql/users/{{ item | regex_replace('@', '%40') }}/permissions"
    headers:
      Guacamole-Token: "{{ token.json.authToken }}"
      Content-Type: "application/json"
    method: PATCH
    body_format: json
    body: "{{ [{'op': 'add', 'path': '/connectionPermissions/' ~ new_connection.json.identifier, 'value': 'READ'}] }}"
    validate_certs: false
    status_code: 204
  loop: "{{ guacamole_users.json.keys() }}"
  when: connectionid is not defined and new_connection.json is defined
