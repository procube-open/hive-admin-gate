# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Result(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result: str=None, failed_data: str=None, count: int=None, target_count: int=None, create_count: int=None, first_time_count: int=None, update_count: int=None, delete_count: int=None):  # noqa: E501
        """Result - a model defined in Swagger

        :param result: The result of this Result.  # noqa: E501
        :type result: str
        :param failed_data: The failed_data of this Result.  # noqa: E501
        :type failed_data: str
        :param count: The count of this Result.  # noqa: E501
        :type count: int
        :param target_count: The target_count of this Result.  # noqa: E501
        :type target_count: int
        :param create_count: The create_count of this Result.  # noqa: E501
        :type create_count: int
        :param first_time_count: The first_time_count of this Result.  # noqa: E501
        :type first_time_count: int
        :param update_count: The update_count of this Result.  # noqa: E501
        :type update_count: int
        :param delete_count: The delete_count of this Result.  # noqa: E501
        :type delete_count: int
        """
        self.swagger_types = {
            'result': str,
            'failed_data': str,
            'count': int,
            'target_count': int,
            'create_count': int,
            'first_time_count': int,
            'update_count': int,
            'delete_count': int
        }

        self.attribute_map = {
            'result': 'result',
            'failed_data': 'failedData',
            'count': 'count',
            'target_count': 'targetCount',
            'create_count': 'createCount',
            'first_time_count': 'firstTimeCount',
            'update_count': 'updateCount',
            'delete_count': 'deleteCount'
        }
        self._result = result
        self._failed_data = failed_data
        self._count = count
        self._target_count = target_count
        self._create_count = create_count
        self._first_time_count = first_time_count
        self._update_count = update_count
        self._delete_count = delete_count

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> str:
        """Gets the result of this Result.

        成功時は completed 、失敗時は failed が設定される  # noqa: E501

        :return: The result of this Result.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this Result.

        成功時は completed 、失敗時は failed が設定される  # noqa: E501

        :param result: The result of this Result.
        :type result: str
        """
        allowed_values = ["completed", "failed"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def failed_data(self) -> str:
        """Gets the failed_data of this Result.

        result が failed の場合のみ、エラーメッセージが設定される  # noqa: E501

        :return: The failed_data of this Result.
        :rtype: str
        """
        return self._failed_data

    @failed_data.setter
    def failed_data(self, failed_data: str):
        """Sets the failed_data of this Result.

        result が failed の場合のみ、エラーメッセージが設定される  # noqa: E501

        :param failed_data: The failed_data of this Result.
        :type failed_data: str
        """

        self._failed_data = failed_data

    @property
    def count(self) -> int:
        """Gets the count of this Result.

        Excel ファイルの行数（成功時のみ）  # noqa: E501

        :return: The count of this Result.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Result.

        Excel ファイルの行数（成功時のみ）  # noqa: E501

        :param count: The count of this Result.
        :type count: int
        """

        self._count = count

    @property
    def target_count(self) -> int:
        """Gets the target_count of this Result.

        transfer テーブルの件数（成功時のみ）  # noqa: E501

        :return: The target_count of this Result.
        :rtype: int
        """
        return self._target_count

    @target_count.setter
    def target_count(self, target_count: int):
        """Sets the target_count of this Result.

        transfer テーブルの件数（成功時のみ）  # noqa: E501

        :param target_count: The target_count of this Result.
        :type target_count: int
        """

        self._target_count = target_count

    @property
    def create_count(self) -> int:
        """Gets the create_count of this Result.

        transfer テーブルに新規追加した件数（成功時のみ）  # noqa: E501

        :return: The create_count of this Result.
        :rtype: int
        """
        return self._create_count

    @create_count.setter
    def create_count(self, create_count: int):
        """Sets the create_count of this Result.

        transfer テーブルに新規追加した件数（成功時のみ）  # noqa: E501

        :param create_count: The create_count of this Result.
        :type create_count: int
        """

        self._create_count = create_count

    @property
    def first_time_count(self) -> int:
        """Gets the first_time_count of this Result.

        transfer テーブルを初回読み込みとして更新した件数（成功時のみ）  # noqa: E501

        :return: The first_time_count of this Result.
        :rtype: int
        """
        return self._first_time_count

    @first_time_count.setter
    def first_time_count(self, first_time_count: int):
        """Sets the first_time_count of this Result.

        transfer テーブルを初回読み込みとして更新した件数（成功時のみ）  # noqa: E501

        :param first_time_count: The first_time_count of this Result.
        :type first_time_count: int
        """

        self._first_time_count = first_time_count

    @property
    def update_count(self) -> int:
        """Gets the update_count of this Result.

        transfer テーブルを更新した件数（成功時のみ）  # noqa: E501

        :return: The update_count of this Result.
        :rtype: int
        """
        return self._update_count

    @update_count.setter
    def update_count(self, update_count: int):
        """Sets the update_count of this Result.

        transfer テーブルを更新した件数（成功時のみ）  # noqa: E501

        :param update_count: The update_count of this Result.
        :type update_count: int
        """

        self._update_count = update_count

    @property
    def delete_count(self) -> int:
        """Gets the delete_count of this Result.

        transfer テーブルの人給の属性を削除した件数（成功時のみ）  # noqa: E501

        :return: The delete_count of this Result.
        :rtype: int
        """
        return self._delete_count

    @delete_count.setter
    def delete_count(self, delete_count: int):
        """Sets the delete_count of this Result.

        transfer テーブルの人給の属性を削除した件数（成功時のみ）  # noqa: E501

        :param delete_count: The delete_count of this Result.
        :type delete_count: int
        """

        self._delete_count = delete_count
